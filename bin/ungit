#!/usr/bin/env node
const startLaunchTime = Date.now();
const config = require('../src/config');
const open = require('open');
const path = require('path');
const child_process = require('child_process');

const BugTracker = require('../src/bugtracker');
const bugtracker = new BugTracker('launcher');
const usageStatistics = require('../src/usage-statistics');
const Bluebird = require('bluebird');
// Fastest way to find out if a port is used or not/i.e. if ungit is running
const net = require('net');
const server = net.createServer();
const cleanExit = () => process.exit();

process.on('SIGINT', cleanExit); // catch ctrl-c
process.on('SIGTERM', cleanExit); // catch kill
process.on('uncaughtException', (err) => {
  console.error(err.stack.toString());

  Bluebird.all([
    Bluebird.resolve().then(() => bugtracker.notify(err, 'ungit-launcher')),
    Bluebird.resolve().then(() => usageStatistics.addEvent('launcher-exception'))
  ]).then(cleanExit)
});

const launch = () => {
  const child = child_process.spawn(process.argv[0], // because it's `nodejs` in some OS
    [path.join(__dirname, '..', 'src', 'server.js')].concat(process.argv.slice(2)),
    { cwd: path.join(process.cwd(), '..') }
  );

  child.on('exit', (res) => {
    console.log('Stopped keeping ungit alive');
  });

  let currentUrl = `${config.urlBase}:${config.port}${config.rootPath}`
  if (config.forcedLaunchPath === undefined) {
    currentUrl += `/#/repository?path=${encodeURIComponent(process.cwd())}`
  } else if (config.forcedLaunchPath !== null && config.forcedLaunchPath !== '') {
    currentUrl += `/#/repository?path=${encodeURIComponent(config.forcedLaunchPath)}`
  }

  if (config.launchBrowser && !config.launchCommand) {
    console.log(`Browse to ${currentUrl}`);
    open(currentUrl);
  } else if (config.launchCommand) {
    const command = config.launchCommand.replace(/%U/g, currentUrl);
    console.log(`Running custom launch command: ${command}`);
    child_process.exec(command, (err, stdout, stderr) => {
      if (err) {
        console.log(err)
        return;
      }
      if (config.launchBrowser) {
        open(currentUrl);
      }
    });
  }

  const startupListener = (data) => {
    if (data.toString().indexOf('!!') >= 0) {
      console.log(data.toString().trim());
    }
    else if (data.toString().indexOf('## Mungit started ##') >= 0) {
      child.removeListener('stdout', startupListener);
      child.stdout.on('data', (data) => console.log(data.toString().trim()))
      const launchTime = (Date.now() - startLaunchTime);
      console.log(data.toString());
      console.log(`Took ${launchTime}ms to start server.`);
      usageStatistics.addEvent('server-start', { launchTimeMs: launchTime });
    }
  }

  child.stdout.on('data', startupListener);
  child.stderr.on('data', (data) => console.log(`stderr: ${data.toString().trim()}`))
}

server.listen(config.port, (err) => {
  server.close(launch);
});
server.on('error', (e) => {
  if (e.code == 'EADDRINUSE') {
    console.log('Ungit server already running');
    cleanExit();
  }
});
